module.exports = [{"name":"EyeIcon","description":"Label for form inputs","props":{"color":{"type":{"name":"string"},"required":false,"description":"Color of Eye Icon","defaultValue":{"value":"'#4d4d4d'","computed":false}},"size":{"type":{"name":"number"},"required":false,"description":"","defaultValue":{"value":"16","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Label for form inputs */\r\nfunction EyeIcon({color, size}) {\r\n  // Attribution: Fabi√°n Alexis (https://github.com/fabianalexisinostroza/Antu) [CC BY-SA 3.0 (http://creativecommons.org/licenses/by-sa/3.0)], via Wikimedia Commons\r\n  return (\r\n    <svg width={size} height={size} xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 22 22\">\r\n      <g transform=\"matrix(.02146 0 0 .02146 1 1)\" fill={color}>\r\n        <path d=\"m466.07 161.53c-205.6 0-382.8 121.2-464.2 296.1-2.5 5.3-2.5 11.5 0 16.9 81.4 174.9 258.6 296.1 464.2 296.1 205.6 0 382.8-121.2 464.2-296.1 2.5-5.3 2.5-11.5 0-16.9-81.4-174.9-258.6-296.1-464.2-296.1m0 514.7c-116.1 0-210.1-94.1-210.1-210.1 0-116.1 94.1-210.1 210.1-210.1 116.1 0 210.1 94.1 210.1 210.1 0 116-94.1 210.1-210.1 210.1\" />\r\n        <circle cx=\"466.08\" cy=\"466.02\" r=\"134.5\" />\r\n      </g>\r\n    </svg>\r\n  );\r\n}\r\n\r\nEyeIcon.propTypes = {\r\n  /** Color of Eye Icon */\r\n  color: PropTypes.string,\r\n  size: PropTypes.number\r\n};\r\n\r\nEyeIcon.defaultProps = {\r\n  color: '#4d4d4d',\r\n  size: 16\r\n};\r\n\r\nexport default EyeIcon;","examples":[{"name":"ExampleEyeIcon","description":"EyeIcon  50 x 50","code":"import React from 'react';\nimport EyeIcon from 'ps-react/EyeIcon';\n\n/** EyeIcon  50 x 50 */\nexport default function ExampleEyeIcon() {\n  return <EyeIcon size={50} color=\"purple\" />\n}"}]},{"name":"HelloWorld","description":"A super lame component that says Hello w/ a custom message","props":{"message":{"type":{"name":"string"},"required":false,"description":"Message to display","defaultValue":{"value":"'World'","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** A super lame component that says Hello w/ a custom message */\r\nfunction HelloWorld({message}) {\r\n  return <div>Hello {message}</div>\r\n}\r\n\r\nHelloWorld.propTypes = {\r\n  /** Message to display */\r\n  message: PropTypes.string\r\n}\r\n\r\nHelloWorld.defaultProps = {\r\n  message: 'World'\r\n};\r\n\r\nexport default HelloWorld;","examples":[{"name":"ExampleHelloWorld","description":"Custom Message","code":"import React from 'react';\nimport HelloWorld from 'ps-react/HelloWorld';\n\n/** Custom Message */\nexport default function ExampleHelloWorld() {\n  return <HelloWorld message=\"Dummy\" />\n}"}]},{"name":"Label","description":"Label for form inputs","props":{"htmlFor":{"type":{"name":"string"},"required":true,"description":"Which form element this label is for"},"label":{"type":{"name":"string"},"required":true,"description":"Text to display","defaultValue":{"value":"'Label'","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Indicate required w/ red asterick"}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\n/** Label for form inputs */\r\nfunction Label ({htmlFor, label, required}) {\r\n  Label.propTypes = {\r\n    /** Which form element this label is for */\r\n    htmlFor: PropTypes.string.isRequired,\r\n    /** Text to display */\r\n    label: PropTypes.string.isRequired,\r\n    /** Indicate required w/ red asterick */\r\n    required: PropTypes.bool\r\n  };\r\n\r\n  Label.defaultProps = {\r\n    label: 'Label'\r\n  };\r\n\r\n    return (\r\n      <label style={{ display: 'block' }}\r\n      htmlFor={htmlFor}>\r\n      {label} { required && <span style={{color: 'red', fontWeight:'bold', fontSize:24}}> * </span>}\r\n      </label>\r\n    );\r\n}\r\n\r\nexport default Label;","examples":[{"name":"ExampleLabel","description":"Required label","code":"import React from 'react';\nimport Label from 'ps-react/Label';\n\n/** Required label */\nexport default function ExampleLabel() {\n  return <Label htmlFor=\"big_dog\" required={true} label=\"This is my standardized label\" />\n}"}]},{"name":"PasswordInput","description":"Text input w/ integrated label to enforce consistency in layout, error display, label placement and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":false,"description":""},"value":{"type":{"name":"any"},"required":false,"description":""},"label":{"type":{"name":"string"},"required":false,"description":"","defaultValue":{"value":"'Password'","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call onChange"},"maxLength":{"type":{"name":"number"},"required":false,"description":"Max password length accepted","defaultValue":{"value":"20","computed":false}},"placeholder":{"type":{"name":"string"},"required":false,"description":""},"showVisibilityToggle":{"type":{"name":"bool"},"required":false,"description":"Allow show password","defaultValue":{"value":"true","computed":false}},"quality":{"type":{"name":"number"},"required":false,"description":"Max password length accepted"},"error":{"type":{"name":"string"},"required":false,"description":""},"required":{"type":{"name":"bool"},"required":false,"description":"","defaultValue":{"value":"true","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport ProgressBar from '../ProgressBar';\r\nimport EyeIcon from '../EyeIcon';\r\nimport TextInput from '../TextInput';\r\n\r\n/** Text input w/ integrated label to enforce consistency in layout, error display, label placement and required field marker. */\r\nclass PasswordInput extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      showPassword: false\r\n    }\r\n  }\r\n\r\n  toggleShowPassword = event => {\r\n    this.setState(prevState => {\r\n      return { showPassword: !prevState.showPassword };\r\n    });\r\n    if (event) event.preventDefault();\r\n  }\r\n\r\n  render() {\r\n    const {htmlId, label, maxLength, error, placeholder, required, onChange, value, showVisibilityToggle, quality, ...props} = this.props;\r\n    const {showPassword} = this.state;\r\n\r\n    return (\r\n      <div style={{ marginBottom: 16 }}>\r\n        <TextInput\r\n          htmlId={htmlId}\r\n          label={label}\r\n          placeholder={placeholder}\r\n          type={showPassword ? 'text' : 'password'}\r\n          onChange={onChange}\r\n          value={value}\r\n          maxLength={maxLength}\r\n          error={error}\r\n          required={required}\r\n          {...props}>\r\n          {\r\n            showVisibilityToggle &&\r\n            <a\r\n              href=\"#\"\r\n              onClick={this.toggleShowPassword}\r\n              style={{ marginLeft: 5 }}>\r\n              <EyeIcon />\r\n            </a>\r\n          }\r\n          {\r\n            value.length > 0 && quality && <ProgressBar style={{marginTop: '10px'}} percent={quality} width={130} />\r\n          }\r\n        </TextInput>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nPasswordInput.propTypes = {\r\n  htmlId: PropTypes.string,\r\n  // name: PropTypes.string,\r\n  value: PropTypes.any,\r\n  label: PropTypes.string,\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func,\r\n  /** Max password length accepted */\r\n  maxLength: PropTypes.number,\r\n  placeholder: PropTypes.string,\r\n  /** Allow show password */\r\n  showVisibilityToggle: PropTypes.bool,\r\n  /** Max password length accepted */\r\n  quality: PropTypes.number,\r\n\r\n  error: PropTypes.string,\r\n  required: PropTypes.bool\r\n\r\n};\r\n\r\nPasswordInput.defaultProps = {\r\n  showVisibilityToggle: true,\r\n  maxLength: 20,\r\n  label: 'Password',\r\n  required: true\r\n};\r\n\r\nexport default PasswordInput;","examples":[{"name":"ExamplePasswordInput","description":"Required TextBox","code":"import React from 'react';\nimport PasswordInput from 'ps-react/PasswordInput';\n\n/** Required TextBox */\nclass ExamplePasswordInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: ''\n    }\n  }\n\n  getQuality() {\n    const length = this.state.password.length;\n    return length > 10 ? 100 : (length * 10);\n  }\n\n  render() {\n    return (\n      <div>\n      <PasswordInput\n      htmlId=\"password-input-all-features\"\n      name=\"password\"\n      onChange={event => this.setState({password: event.target.value})}\n      value={this.state.password}\n      minLength={8}\n      placeholder=\"Enter Password\"\n      showVisibilityToggle={true}\n      quality={this.getQuality()}\n      {...this.props}\n      />\n      </div>\n    )\n  }\n}\n\nexport default ExamplePasswordInput;"}]},{"name":"ProgressBar","description":"","props":{"percent":{"type":{"name":"number"},"required":true,"description":"Percent of progress completed"},"width":{"type":{"name":"number"},"required":true,"description":"Bar width"},"height":{"type":{"name":"number"},"required":false,"description":"Bar height","defaultValue":{"value":"5","computed":false}},"styles":{"type":{"name":"object"},"required":false,"description":""}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nclass ProgressBar extends React.Component {\r\n  static propTypes = {\r\n    /** Percent of progress completed */\r\n    percent: PropTypes.number.isRequired,\r\n    /** Bar width */\r\n    width: PropTypes.number.isRequired,\r\n    /** Bar height */\r\n    height: PropTypes.number,\r\n    styles: PropTypes.object\r\n  };\r\n\r\n  static defaultProps = {\r\n    height: 5\r\n  };\r\n\r\n  getColor = (percent) => {\r\n    if (this.props.percent === 100) return 'green';\r\n    return this.props.percent > 50 ? 'lightgreen' : 'red';\r\n  }\r\n\r\n  getWidthAsPercentOfTotalWidth = () => {\r\n    return parseInt(this.props.width * (this.props.percent / 100), 10);\r\n  }\r\n\r\n  render() {\r\n    const {percent, width, height} = this.props;\r\n    return (\r\n      <div style={{ border: 'solid 1px lightgray', width: width, marginTop:10 }}>\r\n        <div style={{\r\n          width: this.getWidthAsPercentOfTotalWidth(),\r\n          height,\r\n          backgroundColor: this.getColor(percent)\r\n        }} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ProgressBar;","examples":[{"name":"Example10Percent","description":"10% progress, 10 height, 200 width","code":"import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 10% progress, 10 height, 200 width */\nexport default function Example10Percent() {\n  return <ProgressBar height={10} width={200} percent={10} />\n}"},{"name":"Example75Percent","description":"10% progress, 15 height, 500 width","code":"import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 10% progress, 15 height, 500 width */\nexport default function Example75Percent() {\n  return <ProgressBar height={15} width={500} percent={75} />\n}"},{"name":"ExampleProgressBar","description":"100% height not specified","code":"import React from 'react';\nimport ProgressBar from 'ps-react/ProgressBar';\n\n/** 100% height not specified */\nexport default function ExampleProgressBar() {\n  return <ProgressBar width={200} percent={100} />\n}"}]},{"name":"RegistrationForm","description":"Registration form w/ built-in validation","props":{"confirmationMessage":{"type":{"name":"string"},"required":false,"description":"Pleasantries if form submits successfully","defaultValue":{"value":"'Thanks for registering!'","computed":false}},"onSubmit":{"type":{"name":"func"},"required":false,"description":"Function to call onSubmit"},"minPasswordLength":{"type":{"name":"number"},"required":false,"description":"Min password length accepted","defaultValue":{"value":"8","computed":false}}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport PasswordInput from '../PasswordInput';\r\nimport TextInput from '../TextInput';\r\n\r\n\r\n/** Registration form w/ built-in validation */\r\nclass RegistrationForm extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      user: {\r\n        email: '',\r\n        password: ''\r\n      },\r\n      errors: {},\r\n      submitted: false\r\n    }\r\n  }\r\n\r\n  onChange = event => {\r\n    const user = this.state.user;\r\n    user[event.target.name] = event.target.value;\r\n    this.setState({ user });\r\n  }\r\n\r\n  passwordQuality(password) {\r\n    if (!password) return null;\r\n    if (password.length >= this.props.minPasswordLength) return 100;\r\n    const percentOfMinLength = parseInt((password.length / this.props.minPasswordLength) * 100, 10);\r\n    return percentOfMinLength\r\n  }\r\n\r\n  validate({email, password}) {\r\n    const errors = {};\r\n    const {minPasswordLength} = this.props;\r\n    if (!email) errors.email = 'Email required.';\r\n    if (password.length < minPasswordLength) errors.password = `Password must be at least ${minPasswordLength} characters.`;\r\n    this.setState({ errors });\r\n    const formIsValid = Object.getOwnPropertyNames(errors).length === 0;\r\n    return formIsValid;\r\n  }\r\n\r\n  onSubmit = () => {\r\n    const {user} = this.state;\r\n    const formIsValid = this.validate(user);\r\n    if (formIsValid) {\r\n      this.props.onSubmit(user);\r\n      this.setState({ submitted: true });\r\n    }\r\n  }\r\n\r\n\r\n  render() {\r\n    const {submitted, errors} = this.state;\r\n    const {email, password} = this.state.user;\r\n\r\n    return (\r\n      submitted ?\r\n        <h2>{this.props.confirmationMessage}</h2> :\r\n\r\n        <div>\r\n          <form name=\"registration-form\">\r\n          <TextInput\r\n            htmlId=\"registration-form-email\"\r\n            name=\"email\"\r\n            onChange={this.onChange}\r\n            label=\"Email\"\r\n            value={email}\r\n            error={errors.email}\r\n            required={true}\r\n          />\r\n          <PasswordInput\r\n            htmlId=\"registration-form-password\"\r\n            name=\"password\"\r\n            value={password}\r\n            onChange={this.onChange}\r\n            quality={this.passwordQuality(password)}\r\n            error={errors.password}\r\n          />\r\n          <input type=\"submit\" value=\"Register\" onClick={this.onSubmit} />\r\n          </form>\r\n          </div>\r\n\r\n    );\r\n  }\r\n}\r\n\r\nRegistrationForm.propTypes = {\r\n  /** Pleasantries if form submits successfully */\r\n  confirmationMessage: PropTypes.string,\r\n  /** Function to call onSubmit */\r\n  onSubmit: PropTypes.func,\r\n  /** Min password length accepted */\r\n  minPasswordLength: PropTypes.number\r\n};\r\n\r\nRegistrationForm.defaultProps = {\r\n  confirmationMessage: 'Thanks for registering!',\r\n  minPasswordLength: 8\r\n};\r\n\r\nexport default RegistrationForm;","examples":[{"name":"ExampleRegistrationForm","description":"Registration Form","code":"import React from 'react';\nimport RegistrationForm from 'ps-react/RegistrationForm';\n\n/** Registration Form */\nexport default class ExampleRegistrationForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      password: ''\n    }\n  }\n\n  onSubmit = (user) => {\n    console.log(user);\n  }\n\n  render() {\n    return <RegistrationForm onSubmit={this.onSubmit} />\n  }\n}\n\n"}]},{"name":"TextInput","description":"Text input w/ integrated label to enforce consistency in layout, error display, label placement and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":false,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":false,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used"},"label":{"type":{"name":"string"},"required":false,"description":"Input label"},"type":{"type":{"name":"string"},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display in input when empty"},"value":{"type":{"name":"string"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"array"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input w/ integrated label to enforce consistency in layout, error display, label placement and required field marker. */\r\nfunction TextInput({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div style={{ marginBottom: 16 }}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        style={error && { border: 'solid 1px red' }}\r\n        {...props} />\r\n      {children}\r\n      {error && <div className=\"error\" style={{ color: 'red' }}>{error}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInput.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string,\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string,\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n  /** Input type */\r\n  type: PropTypes.string,\r\n  /** Mark label with asterisk if set true */\r\n  required: PropTypes.bool,\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func,\r\n  /** Placeholder to display in input when empty */\r\n  placeholder: PropTypes.string,\r\n  /** Value */\r\n  value: PropTypes.string,\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.array,\r\n};\r\n\r\nexport default TextInput;","examples":[{"name":"ExampleTextInput","description":"Required TextBox","code":"import React from 'react';\nimport TextInput from 'ps-react/TextInput';\n\n/** Required TextBox */\nexport default class ExampleTextInput extends React.Component {\n  render() {\n    return (\n      <TextInput\n        htmlId=\"big_dog\"\n        required={true}\n        label=\"Given Name\"\n        placeholder=\"Eric\"\n        name=\"lastname\"\n        onChange={() => {}}\n        error=\"Given name is required\"\n      />\n    )\n  }\n}"}]},{"name":"TextInputBEM","description":"Text input w/ integrated label to enforce consistency in layout, error display, label placement and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":false,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":false,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used"},"label":{"type":{"name":"string"},"required":false,"description":"Input label"},"type":{"type":{"name":"string"},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display in input when empty"},"value":{"type":{"name":"string"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"array"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\n\r\n/** Text input w/ integrated label to enforce consistency in layout, error display, label placement and required field marker. */\r\nfunction TextInputBEM({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div className=\"textinput\">\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && 'textinput__input--state-error'}\r\n        {...props} />\r\n      {children}\r\n      {error && <div className=\"textinput__error\">{error}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInputBEM.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string,\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string,\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n  /** Input type */\r\n  type: PropTypes.string,\r\n  /** Mark label with asterisk if set true */\r\n  required: PropTypes.bool,\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func,\r\n  /** Placeholder to display in input when empty */\r\n  placeholder: PropTypes.string,\r\n  /** Value */\r\n  value: PropTypes.string,\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.array,\r\n};\r\n\r\nexport default TextInputBEM;","examples":[{"name":"ExampleTextInputBEM","description":"Required TextBox","code":"import React from 'react';\nimport TextInputBEM from 'ps-react/TextInputBEM';\n\n/** Required TextBox */\nexport default class ExampleTextInputBEM extends React.Component {\n  render() {\n    return (\n      <TextInputBEM\n        htmlId=\"big_dog\"\n        required={true}\n        label=\"Given Name\"\n        placeholder=\"Eric\"\n        name=\"lastname\"\n        onChange={() => {}}\n        error=\"Given name is required\"\n      />\n    )\n  }\n}"}]},{"name":"TextInputCSSmodules","description":"Text input w/ integrated label to enforce consistency in layout, error display, label placement and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":false,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":false,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used"},"label":{"type":{"name":"string"},"required":false,"description":"Input label"},"type":{"type":{"name":"string"},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display in input when empty"},"value":{"type":{"name":"string"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"array"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\nimport styles from './textInput.css';\r\n\r\n/** Text input w/ integrated label to enforce consistency in layout, error display, label placement and required field marker. */\r\nfunction TextInputCSSmodules({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n  return (\r\n    <div className={styles.fieldset}>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        className={error && styles.inputError}\r\n        {...props} />\r\n      {children}\r\n      {error && <div className={styles.error}>{error}</div>}\r\n    </div>\r\n  );\r\n}\r\n\r\nTextInputCSSmodules.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string,\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string,\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n  /** Input type */\r\n  type: PropTypes.string,\r\n  /** Mark label with asterisk if set true */\r\n  required: PropTypes.bool,\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func,\r\n  /** Placeholder to display in input when empty */\r\n  placeholder: PropTypes.string,\r\n  /** Value */\r\n  value: PropTypes.string,\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.array,\r\n};\r\n\r\nexport default TextInputCSSmodules;","examples":[{"name":"ExampleTextInputCSSmodules","description":"Required TextBox","code":"import React from 'react';\nimport TextInputCSSmodules from 'ps-react/TextInputCSSmodules';\n\n/** Required TextBox */\nexport default class ExampleTextInputCSSmodules extends React.Component {\n  render() {\n    return (\n      <TextInputCSSmodules\n        htmlId=\"big_dog\"\n        required={true}\n        label=\"Given Name\"\n        placeholder=\"Eric\"\n        name=\"lastname\"\n        onChange={() => {}}\n        error=\"Given name is required\"\n      />\n    )\n  }\n}"}]},{"name":"TextInputStyledComps","description":"Text input w/ integrated label to enforce consistency in layout, error display, label placement and required field marker.","props":{"htmlId":{"type":{"name":"string"},"required":false,"description":"Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing."},"name":{"type":{"name":"string"},"required":false,"description":"Input name. Recommend setting this to match object's property so a single change handler can be used"},"label":{"type":{"name":"string"},"required":false,"description":"Input label"},"type":{"type":{"name":"string"},"required":false,"description":"Input type","defaultValue":{"value":"\"text\"","computed":false}},"required":{"type":{"name":"bool"},"required":false,"description":"Mark label with asterisk if set true","defaultValue":{"value":"false","computed":false}},"onChange":{"type":{"name":"func"},"required":false,"description":"Function to call onChange"},"placeholder":{"type":{"name":"string"},"required":false,"description":"Placeholder to display in input when empty"},"value":{"type":{"name":"string"},"required":false,"description":"Value"},"error":{"type":{"name":"string"},"required":false,"description":"String to display when error occurs"},"children":{"type":{"name":"array"},"required":false,"description":"Child component to display next to the input"}},"code":"import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport Label from '../Label';\r\nimport { Fieldset, Input, Error } from './textInput';\r\n\r\n\r\n\r\n/** Text input w/ integrated label to enforce consistency in layout, error display, label placement and required field marker. */\r\nfunction TextInputStyledComps({htmlId, name, label, type = \"text\", required = false, onChange, placeholder, value, error, children, ...props}) {\r\n\r\n  return (\r\n    <Fieldset>\r\n      <Label htmlFor={htmlId} label={label} required={required} />\r\n      <Input\r\n        id={htmlId}\r\n        type={type}\r\n        name={name}\r\n        placeholder={placeholder}\r\n        value={value}\r\n        onChange={onChange}\r\n        {...props} />\r\n      {children}\r\n      {error && <Error>{error}</Error>}\r\n    </Fieldset>\r\n  );\r\n}\r\n\r\nTextInputStyledComps.propTypes = {\r\n  /** Unique HTML ID. Used for tying label to HTML input. Handy hook for automated testing. */\r\n  htmlId: PropTypes.string,\r\n  /** Input name. Recommend setting this to match object's property so a single change handler can be used */\r\n  name: PropTypes.string,\r\n  /** Input label */\r\n  label: PropTypes.string,\r\n  /** Input type */\r\n  type: PropTypes.string,\r\n  /** Mark label with asterisk if set true */\r\n  required: PropTypes.bool,\r\n  /** Function to call onChange */\r\n  onChange: PropTypes.func,\r\n  /** Placeholder to display in input when empty */\r\n  placeholder: PropTypes.string,\r\n  /** Value */\r\n  value: PropTypes.string,\r\n  /** String to display when error occurs */\r\n  error: PropTypes.string,\r\n  /** Child component to display next to the input */\r\n  children: PropTypes.array,\r\n};\r\n\r\nexport default TextInputStyledComps;","examples":[{"name":"ExampleTextInputStyledComps","description":"Required TextBox","code":"import React from 'react';\nimport TextInputStyledComps from 'ps-react/TextInputStyledComps';\n\n/** Required TextBox */\nexport default class ExampleTextInputStyledComps extends React.Component {\n  render() {\n    return (\n      <TextInputStyledComps\n        htmlId=\"big_dog\"\n        required={true}\n        label=\"Given Name\"\n        placeholder=\"Eric\"\n        name=\"lastname\"\n        onChange={() => {}}\n      />\n    )\n  }\n}"}]}]